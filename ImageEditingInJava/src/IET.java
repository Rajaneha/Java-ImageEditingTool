
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.File;
import java.awt.Color;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.awt.image.BufferedImage;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author JEEVIKA K and RAJANEHA R
 */
public class IET extends javax.swing.JFrame {

    private File f ;
    private String getselectedImage ;
    private BufferedImage image;
    private Boolean apply;
    int choice;
    private int[][]pixels;

    public IET() {
        initComponents();
        BrightValue.setText(""+0);
        image=null;
        f=null;
        save.setEnabled(false);
        SaveIcon.setEnabled(false);
        ApplyFilter.setEnabled(false);
        Blur.setEnabled(false);
        BlurIcon.setEnabled(false);
        Bright.setEnabled(false);
        BrightSlider.setEnabled(false);
        BrightnessIcon.setEnabled(false);
        Down.setEnabled(false);
        DownwardICon.setEnabled(false);
        GrayScale.setEnabled(false);
        GrayScaleIcon.setEnabled(false);
        Left.setEnabled(false);
        LeftRotateIcon.setEnabled(false);
        Mirror.setEnabled(false);
        MirrorIcon.setEnabled(false);
        Negative.setEnabled(false);
        NegativeIcon.setEnabled(false);
        Right.setEnabled(false);
        RightRotateIcon.setEnabled(false);
        SaveIcon.setEnabled(false);
        Sepia.setEnabled(false);
        SepiaIcon.setEnabled(false);
        BrightValue.setEnabled(false);
        RGB.setEnabled(false);
        RedSliders.setEnabled(false);
        Redvalue.setEnabled(false);
        Bluevalue.setEnabled(false);
        BlueSlider.setEnabled(false);
        GreenSlider.setEnabled(false);
        Greenvalue.setEnabled(false);
        
        apply=false;
    }
    public void enable(){
        save.setEnabled(true);
        RGB.setEnabled(true);
        ApplyFilter.setEnabled(true);
        Blur.setEnabled(true);
        BlurIcon.setEnabled(true);
        Bright.setEnabled(true);
        BrightnessIcon.setEnabled(true);
        Down.setEnabled(true);
        DownwardICon.setEnabled(true);
        GrayScale.setEnabled(true);
        GrayScaleIcon.setEnabled(true);
        Left.setEnabled(true);
        LeftRotateIcon.setEnabled(true);
        Mirror.setEnabled(true);
        MirrorIcon.setEnabled(true);
        Negative.setEnabled(true);
        NegativeIcon.setEnabled(true);
        Right.setEnabled(true);
        RightRotateIcon.setEnabled(true);
        SaveIcon.setEnabled(true);
        Sepia.setEnabled(true);
        SepiaIcon.setEnabled(true);
    }
    public void fileOpening(){
        enable();
        try{
            f=new File(getselectedImage);
            image=ImageIO.read(f);
        }
        catch (IOException e){
            System.out.println(e);
        }
    }
    public void DisplayOutputImage(){
        Image imgfit = image;
        Image imagefit = imgfit.getScaledInstance(label2.getWidth(),label2.getHeight(),Image.SCALE_SMOOTH);
        label2.setIcon(new ImageIcon(imagefit));
    }
    public static int Truncate(int value){
        if (value < 0) {
            value = 0;
        }
        else if (value > 255) {
            value = 255;
        }
        return value;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        ToolBar1 = new javax.swing.JToolBar();
        OpenIcon = new javax.swing.JButton();
        SaveIcon = new javax.swing.JButton();
        BlurIcon = new javax.swing.JButton();
        GrayScaleIcon = new javax.swing.JButton();
        NegativeIcon = new javax.swing.JButton();
        SepiaIcon = new javax.swing.JButton();
        ToolBar2 = new javax.swing.JToolBar();
        LeftRotateIcon = new javax.swing.JButton();
        RightRotateIcon = new javax.swing.JButton();
        MirrorIcon = new javax.swing.JButton();
        DownwardICon = new javax.swing.JButton();
        BrightnessIcon = new javax.swing.JButton();
        BrightSlider = new javax.swing.JSlider();
        ApplyFilter = new javax.swing.JButton();
        BrightValue = new javax.swing.JTextField();
        RedSliders = new javax.swing.JSlider();
        GreenSlider = new javax.swing.JSlider();
        Redvalue = new javax.swing.JTextField();
        Greenvalue = new javax.swing.JTextField();
        BlueSlider = new javax.swing.JSlider();
        Bluevalue = new javax.swing.JTextField();
        RGB = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        Close = new javax.swing.JMenuItem();
        Filter = new javax.swing.JMenu();
        GrayScale = new javax.swing.JMenuItem();
        Negative = new javax.swing.JMenuItem();
        Sepia = new javax.swing.JMenuItem();
        Blur = new javax.swing.JMenuItem();
        Bright = new javax.swing.JMenuItem();
        Transform = new javax.swing.JMenu();
        Rotate = new javax.swing.JMenu();
        Right = new javax.swing.JMenuItem();
        Left = new javax.swing.JMenuItem();
        Mirror = new javax.swing.JMenuItem();
        Down = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ImageEditingTool");
        setBackground(new java.awt.Color(255, 0, 0));
        setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        setForeground(new java.awt.Color(204, 255, 255));
        setResizable(false);

        label.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("ORIGINAL IMAGE");

        label2.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        label2.setForeground(new java.awt.Color(0, 51, 204));
        label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label2.setText("EDITED IMAGE");

        ToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        ToolBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ToolBar1.setFloatable(true);
        ToolBar1.setRollover(true);
        ToolBar1.setAutoscrolls(true);

        OpenIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/open small.png"))); // NOI18N
        OpenIcon.setFocusable(false);
        OpenIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OpenIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        OpenIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenIconActionPerformed(evt);
            }
        });
        ToolBar1.add(OpenIcon);

        SaveIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save small.png"))); // NOI18N
        SaveIcon.setFocusable(false);
        SaveIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SaveIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SaveIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveIconActionPerformed(evt);
            }
        });
        ToolBar1.add(SaveIcon);

        BlurIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Blur.png"))); // NOI18N
        BlurIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BlurIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BlurIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlurIconActionPerformed(evt);
            }
        });
        ToolBar1.add(BlurIcon);

        GrayScaleIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/GrayScale.png"))); // NOI18N
        GrayScaleIcon.setFocusable(false);
        GrayScaleIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GrayScaleIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        GrayScaleIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrayScaleIconActionPerformed(evt);
            }
        });
        ToolBar1.add(GrayScaleIcon);

        NegativeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Negative.png"))); // NOI18N
        NegativeIcon.setFocusable(false);
        NegativeIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NegativeIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NegativeIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeIconActionPerformed(evt);
            }
        });
        ToolBar1.add(NegativeIcon);

        SepiaIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Sepia2.png"))); // NOI18N
        SepiaIcon.setFocusable(false);
        SepiaIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SepiaIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SepiaIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SepiaIconActionPerformed(evt);
            }
        });
        ToolBar1.add(SepiaIcon);

        ToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        ToolBar2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ToolBar2.setRollover(true);

        LeftRotateIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left rotate.png"))); // NOI18N
        LeftRotateIcon.setFocusable(false);
        LeftRotateIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LeftRotateIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LeftRotateIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftRotateIconActionPerformed(evt);
            }
        });
        ToolBar2.add(LeftRotateIcon);

        RightRotateIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/right rotate.png"))); // NOI18N
        RightRotateIcon.setFocusable(false);
        RightRotateIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RightRotateIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RightRotateIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightRotateIconActionPerformed(evt);
            }
        });
        ToolBar2.add(RightRotateIcon);

        MirrorIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mirror.png"))); // NOI18N
        MirrorIcon.setFocusable(false);
        MirrorIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MirrorIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MirrorIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MirrorIconActionPerformed(evt);
            }
        });
        ToolBar2.add(MirrorIcon);

        DownwardICon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/downward.png"))); // NOI18N
        DownwardICon.setFocusable(false);
        DownwardICon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DownwardICon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        DownwardICon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownwardIConActionPerformed(evt);
            }
        });
        ToolBar2.add(DownwardICon);

        BrightnessIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Bright.png"))); // NOI18N
        BrightnessIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BrightnessIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BrightnessIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrightnessIconActionPerformed(evt);
            }
        });
        ToolBar2.add(BrightnessIcon);

        BrightSlider.setMinimum(-100);
        BrightSlider.setMinorTickSpacing(10);
        BrightSlider.setPaintTicks(true);
        BrightSlider.setSnapToTicks(true);
        BrightSlider.setValue(0);
        BrightSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        BrightSlider.setMaximumSize(new java.awt.Dimension(200, 20));
        BrightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BrightSliderStateChanged(evt);
            }
        });
        ToolBar2.add(BrightSlider);

        ApplyFilter.setBackground(new java.awt.Color(147, 204, 204));
        ApplyFilter.setText("Apply");
        ApplyFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyFilterActionPerformed(evt);
            }
        });

        BrightValue.setEditable(false);
        BrightValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrightValueActionPerformed(evt);
            }
        });

        RedSliders.setMajorTickSpacing(25);
        RedSliders.setMaximum(255);
        RedSliders.setMinorTickSpacing(25);
        RedSliders.setPaintTicks(true);
        RedSliders.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RedSlidersStateChanged(evt);
            }
        });

        GreenSlider.setMaximum(255);
        GreenSlider.setMinorTickSpacing(25);
        GreenSlider.setPaintTicks(true);
        GreenSlider.setSnapToTicks(true);
        GreenSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GreenSliderStateChanged(evt);
            }
        });

        Redvalue.setEditable(false);
        Redvalue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedvalueActionPerformed(evt);
            }
        });

        Greenvalue.setEditable(false);

        BlueSlider.setMaximum(225);
        BlueSlider.setMinorTickSpacing(25);
        BlueSlider.setPaintTicks(true);
        BlueSlider.setSnapToTicks(true);
        BlueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BlueSliderStateChanged(evt);
            }
        });

        Bluevalue.setEditable(false);

        RGB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/RGB.png"))); // NOI18N
        RGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGBActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(51, 0, 51));
        jMenuBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        File.setBackground(new java.awt.Color(255, 153, 153));
        File.setText("File");
        File.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileActionPerformed(evt);
            }
        });

        Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/open small.png"))); // NOI18N
        Open.setText("Open");
        Open.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save small.png"))); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        File.add(save);

        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit small.png"))); // NOI18N
        Close.setText("Close");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        File.add(Close);

        jMenuBar1.add(File);

        Filter.setText("Filter");
        Filter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        GrayScale.setText("Grayscale");
        GrayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrayScaleActionPerformed(evt);
            }
        });
        Filter.add(GrayScale);

        Negative.setText("Negative");
        Negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeActionPerformed(evt);
            }
        });
        Filter.add(Negative);

        Sepia.setText("Sepia");
        Sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SepiaActionPerformed(evt);
            }
        });
        Filter.add(Sepia);

        Blur.setText("Blur");
        Blur.setToolTipText("");
        Blur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlurActionPerformed(evt);
            }
        });
        Filter.add(Blur);

        Bright.setText("Bright");
        Bright.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrightActionPerformed(evt);
            }
        });
        Filter.add(Bright);

        jMenuBar1.add(Filter);

        Transform.setBorder(null);
        Transform.setText("Transform");
        Transform.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        Rotate.setText("Rotate");

        Right.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/right rotate.png"))); // NOI18N
        Right.setText("Right");
        Right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightActionPerformed(evt);
            }
        });
        Rotate.add(Right);

        Left.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left rotate.png"))); // NOI18N
        Left.setText("Left");
        Left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftActionPerformed(evt);
            }
        });
        Rotate.add(Left);

        Mirror.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mirror.png"))); // NOI18N
        Mirror.setText("Mirror");
        Mirror.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MirrorActionPerformed(evt);
            }
        });
        Rotate.add(Mirror);

        Down.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/downward.png"))); // NOI18N
        Down.setText("Down");
        Down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownActionPerformed(evt);
            }
        });
        Rotate.add(Down);

        Transform.add(Rotate);

        jMenuBar1.add(Transform);

        jMenu1.setText("Help");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ApplyFilter)
                .addGap(420, 420, 420))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BrightValue, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(RGB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(GreenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BlueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Greenvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Bluevalue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RedSliders, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(Redvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 27, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrightValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ApplyFilter)
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Redvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RedSliders, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Greenvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GreenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RGB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bluevalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BlueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(446, 446, 446))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GrayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrayScaleActionPerformed
        // GrayScale Filter 
        choice = 11;
        if(apply == true)
        {
            int width = image.getWidth();
            int height = image.getHeight();
            for(int y=0;y<height;y++){
                for(int x=0;x<width;x++){
                    int p=image.getRGB(x,y);
                    int a=(p>>24)&0xff;
                    int r=(p>>16)&0xff;
                    int g=(p>>8)&0xff;
                    int b=p&0xff;

                    int avg=(r+g+b)/3;
                    p=(a<<24)|(avg<<16)|(avg<<8)|avg;
                    image.setRGB(x,y,p);
                }
            }
            apply = false;
            DisplayOutputImage();
        }
        
    }//GEN-LAST:event_GrayScaleActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed

        ///OPEN AN IMAGE IN FIRST LABEL
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("3 Extensions Supported","jpg","jpeg","png");
        fileChooser.setFileFilter(filter);
        int selectedimage = fileChooser.showOpenDialog(null);
        if(selectedimage == JFileChooser.APPROVE_OPTION){
            f = fileChooser.getSelectedFile();       //f->File Object
            getselectedImage = f.getAbsolutePath();  // getselectedImage ->String object
            ImageIcon img = new ImageIcon(getselectedImage);
            Image imgfit = img.getImage();
            Image imagefit = imgfit.getScaledInstance(label.getWidth(),label.getHeight(),Image.SCALE_SMOOTH);
            label.setIcon(new ImageIcon(imagefit)); 
        }
        fileOpening();
    }//GEN-LAST:event_OpenActionPerformed

    private void FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileActionPerformed
        
    }//GEN-LAST:event_FileActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFrame frame = new JFrame("SAVE");
        if(JOptionPane.showConfirmDialog(frame,"Do you want to save?","SAVE",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION)
        {
            JFileChooser saveFile= new JFileChooser("C:\\Users\\JEEVIKA K\\OneDrive\\Documents\\Output IET");
            int selectedImage=saveFile.showSaveDialog(null);
            if(selectedImage== JFileChooser.APPROVE_OPTION){
                try{
                    ImageIO.write(image, "jpeg",saveFile.getSelectedFile() );
                }catch(IOException ioe){
                }
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed
        
    }//GEN-LAST:event_FilterActionPerformed

    private void SepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SepiaActionPerformed
        choice = 31;
        if(apply == true){
            int width = image.getWidth();
            int height = image.getHeight();
            for(int y=0;y<height;y++){
                for(int x=0;x<width;x++){
                    int p=image.getRGB(x,y);
                    int a=(p>>24)&0xff;
                    int r=(p>>16)&0xff;
                    int g=(p>>8)&0xff;
                    int b=p&0xff;

                    int Red=(int)(0.393*r + 0.769*g + 0.189*b);
                    int Green=(int)(0.349 *r + 0.686*g + 0.168*b);
                    int Blue=(int)(0.272*r + 0.534*g + 0.131*b);

                    if(Red>255)
                        r=255;
                    else
                        r=Red;
                    if(Blue>255)
                        b=255;
                    else
                        b=Blue;
                    if(Green>255)
                        g=255;
                    else
                        g=Green;
                    p=(a<<24)|(r<<16)|(g<<8)|b;
                    image.setRGB(x,y,p);
                }
            }
            apply = false;
            DisplayOutputImage();
        }
        
    }//GEN-LAST:event_SepiaActionPerformed

    private void NegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeActionPerformed
        choice = 21;
        if(apply == true){
            int width = image.getWidth();
            int height = image.getHeight();
            for(int y=0;y<height;y++){
                for(int x=0;x<width;x++){
                    int p=image.getRGB(x,y);
                    int a=(p>>24)&0xff;
                    int r=(p>>16)&0xff;
                    int g=(p>>8)&0xff;
                    int b=p&0xff;
                    r=255-r;
                    g=255-g;
                    b=255-b;
                    p=(a<<24)|(r<<16)|(g<<8)|b;
                    image.setRGB(x,y,p);
                }
            }
            apply = false;
            DisplayOutputImage();
        }
       
    }//GEN-LAST:event_NegativeActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        JFrame frame = new JFrame("EXIT");
        if(JOptionPane.showConfirmDialog(frame,"Do you want to exit?","EXIT",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_CloseActionPerformed

    private void RightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightActionPerformed
        choice = 51;
        if(apply == true){
            int width= image.getWidth();
            int height= image.getHeight();
            BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            Graphics2D g2=newImage.createGraphics();   //creating graphics in buffered image

            g2.rotate(Math.toRadians(90),width/2,height/2);
            g2.drawImage(image,null,0,0);
            image = newImage;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_RightActionPerformed

    private void LeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftActionPerformed
        choice = 61;
        if(apply == true){
            int width= image.getWidth();
            int height= image.getHeight();
            BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            Graphics2D g2=newImage.createGraphics();   //creating graphics in buffered image

            g2.rotate(Math.toRadians(270),width/2,height/2);
            g2.drawImage(image,null,0,0);
            image = newImage;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_LeftActionPerformed

    private void DownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownActionPerformed
        choice = 81;
        if(apply == true){
            int width= image.getWidth();
            int height= image.getHeight();
            BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            Graphics2D g2=newImage.createGraphics();   //creating graphics in buffered image

            g2.rotate(Math.toRadians(180),width/2,height/2);
            g2.drawImage(image,null,0,0);
            image = newImage;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_DownActionPerformed

    private void MirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MirrorActionPerformed
        choice = 71;
        if(apply == true){
            int width=image.getWidth();
            int height=image.getHeight();
            BufferedImage temp=null;
            try{
                f=new File(getselectedImage);
                temp=ImageIO.read(f);
            }
            catch (IOException e){
                System.out.println(e);
            }
            int x2=width-1;
            for(int y=0;y<height;y++){
                for(int x=0;x<width && x2>=0;x++){
                    int p=image.getRGB(x, y);
                    temp.setRGB(x2,y,p);
                    x2--;
                }
                x2=width-1;
            }
            image=temp;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_MirrorActionPerformed

    private void SaveIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveIconActionPerformed
        JFrame frame = new JFrame("SAVE");
        if(JOptionPane.showConfirmDialog(frame,"Do you want to save?","SAVE",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION)
        {
            JFileChooser saveFile= new JFileChooser("C:\\Users\\JEEVIKA K\\OneDrive\\Documents\\Output IET");
            int selectedImage=saveFile.showSaveDialog(IET.this);
            if(selectedImage== JFileChooser.APPROVE_OPTION){
                try{
                    ImageIO.write(image, "jpeg",saveFile.getSelectedFile() );
                }catch(IOException ioe){
                }
            }
        }
    }//GEN-LAST:event_SaveIconActionPerformed

    private void OpenIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenIconActionPerformed
        ///OPEN
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("3 Extensions Supported","jpg","jpeg","png");
        fileChooser.setFileFilter(filter);
        int selectedimage = fileChooser.showOpenDialog(null);
        if(selectedimage == JFileChooser.APPROVE_OPTION)
        {
            f = fileChooser.getSelectedFile();
            getselectedImage = f.getAbsolutePath();
            ImageIcon img = new ImageIcon(getselectedImage);
            Image imgfit = img.getImage();
            Image imagefit = imgfit.getScaledInstance(label.getWidth(),label.getHeight(),Image.SCALE_SMOOTH);
            label.setIcon(new ImageIcon(imagefit)); 
        }
        fileOpening();
    }//GEN-LAST:event_OpenIconActionPerformed

    private void BlurIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlurIconActionPerformed
        choice = 42;
        if(apply == true)
        {
            Color color[];
            int i=0;
            int max=400,rad=10;
            int a1=0,r1=0,g1=0,b1=0;
            color= new Color[max];
            int x = 1, y = 1, x1, y1, ex = 5, d = 0;
            BufferedImage temp=null;
            try{
                f=new File(getselectedImage);
                temp=ImageIO.read(f);
               }
            catch (IOException e){
                System.out.println(e);
            }
            for (x = rad; x < image.getHeight() - rad; x++) {
                for (y = rad; y < image.getWidth() - rad; y++) {
                    for (x1 = x - rad; x1 < x + rad; x1++) {
                        for (y1 = y - rad; y1 < y + rad; y1++) {
                            color[i++] = new Color(image.getRGB(y1, x1));
                        }
                    }
                    // Smoothing colors of image
                    i = 0;
                    for (d = 0; d < max; d++) {
                        a1 = a1 + color[d].getAlpha();
                    }
                    a1 = a1 / (max);
                    for (d = 0; d < max; d++) {
                        r1 = r1 + color[d].getRed();
                    }
                    r1 = r1 / (max);
                    for (d = 0; d < max; d++) {
                        g1 = g1 + color[d].getGreen();
                    }
                    g1 = g1 / (max);
                    for (d = 0; d < max; d++) {
                        b1 = b1 + color[d].getBlue();
                    }
                    b1 = b1 / (max);
                    int sum1 = (a1 << 24) + (r1 << 16) + (g1 << 8) + b1;
                    temp.setRGB(y, x, (int)(sum1));
                }
            }
            image=temp;
            apply = false;
            DisplayOutputImage();
        }  
    }//GEN-LAST:event_BlurIconActionPerformed

    private void BlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlurActionPerformed
        // TODO add your handling code here:
        choice = 41;
        if(apply = true)
        {
            Color color[];
            int i=0;
            int max=400,rad=10;
            int a1=0,r1=0,g1=0,b1=0;
            color= new Color[max];
            int x = 1, y = 1, x1, y1, ex = 5, d = 0;
            BufferedImage temp=null;
            try{
                f=new File(getselectedImage);
                temp=ImageIO.read(f);
            }
            catch (IOException e){
                System.out.println(e);
            }
            for (x = rad; x < image.getHeight() - rad; x++) {
                for (y = rad; y < image.getWidth() - rad; y++) {
                    for (x1 = x - rad; x1 < x + rad; x1++) {
                        for (y1 = y - rad; y1 < y + rad; y1++) {
                            color[i++] = new Color(
                                  image.getRGB(y1, x1));
                        }
                    }
                    // Smoothing colors of image
                    i = 0;
                    for (d = 0; d < max; d++) {
                        a1 = a1 + color[d].getAlpha();
                    }
                    a1 = a1 / (max);
                    for (d = 0; d < max; d++) {
                        r1 = r1 + color[d].getRed();
                    }
                    r1 = r1 / (max);
                    for (d = 0; d < max; d++) {
                        g1 = g1 + color[d].getGreen();
                    }
                    g1 = g1 / (max);
                    for (d = 0; d < max; d++) {
                        b1 = b1 + color[d].getBlue();
                    }
                    b1 = b1 / (max);
                    int sum1 = (a1 << 24) + (r1 << 16)
                            + (g1 << 8) + b1;
                    temp.setRGB(y, x, (int)(sum1));
                }
            }
            image=temp;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_BlurActionPerformed

    private void GrayScaleIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrayScaleIconActionPerformed
        choice=12;
        if(apply==true){
            int width = image.getWidth();
            int height = image.getHeight();
            for(int y=0;y<height;y++){
                for(int x=0;x<width;x++){
                    int p=image.getRGB(x,y);
                    int a=(p>>24)&0xff;
                    int r=(p>>16)&0xff;
                    int g=(p>>8)&0xff;
                    int b=p&0xff;

                    int avg=(r+g+b)/3;
                    p=(a<<24)|(avg<<16)|(avg<<8)|avg;
                    image.setRGB(x,y,p);
                }
            }
            apply=false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_GrayScaleIconActionPerformed

    private void NegativeIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeIconActionPerformed
        choice = 22;
        if(apply == true)
        {    
            int width = image.getWidth();
            int height = image.getHeight();
            for(int y=0;y<height;y++){
                for(int x=0;x<width;x++){
                    int p=image.getRGB(x,y);
                    int a=(p>>24)&0xff;
                    int r=(p>>16)&0xff;
                    int g=(p>>8)&0xff;
                    int b=p&0xff;

                    r=255-r;
                    g=255-g;
                    b=255-b;
                    p=(a<<24)|(r<<16)|(g<<8)|b;
                    image.setRGB(x,y,p);
                }
            }
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_NegativeIconActionPerformed

    private void SepiaIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SepiaIconActionPerformed
        choice = 32;
        if(apply == true)
        {
            int width = image.getWidth();
            int height = image.getHeight();
            for(int y=0;y<height;y++){
                for(int x=0;x<width;x++){
                    int p=image.getRGB(x,y);
                    int a=(p>>24)&0xff;
                    int r=(p>>16)&0xff;
                    int g=(p>>8)&0xff;
                    int b=p&0xff;

                    int Red=(int)(0.393*r + 0.769*g + 0.189*b);
                    int Green=(int)(0.349 *r + 0.686*g + 0.168*b);
                    int Blue=(int)(0.272*r + 0.534*g + 0.131*b);

                    if(Red>255)
                        r=255;
                    else
                        r=Red;
                    if(Blue>255)
                        b=255;
                    else
                        b=Blue;
                    if(Green>255)
                        g=255;
                    else
                        g=Green;

                    p=(a<<24)|(r<<16)|(g<<8)|b;
                    image.setRGB(x,y,p);
                }
            }
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_SepiaIconActionPerformed

    private void RightRotateIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightRotateIconActionPerformed
        choice = 52;
        if(apply == true)
        {
            int width= image.getWidth();
            int height= image.getHeight();
            BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            Graphics2D g2=newImage.createGraphics();   //creating graphics in buffered image

            g2.rotate(Math.toRadians(90),width/2,height/2);
            g2.drawImage(image,null,0,0);
            image = newImage;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_RightRotateIconActionPerformed

    private void LeftRotateIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftRotateIconActionPerformed
        choice = 62;
        if(apply == true)
        {
            int width= image.getWidth();
            int height= image.getHeight();
            BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            Graphics2D g2=newImage.createGraphics();   //creating graphics in buffered image

            g2.rotate(Math.toRadians(270),width/2,height/2);
            g2.drawImage(image,null,0,0);
            image = newImage;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_LeftRotateIconActionPerformed

    private void MirrorIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MirrorIconActionPerformed
        choice = 72;
        if(apply == true)
        {
            int width=image.getWidth();
            int height=image.getHeight();
            BufferedImage temp=null;
            try{
                f=new File(getselectedImage);
                temp=ImageIO.read(f);
            }
            catch (IOException e){
                System.out.println(e);
            }
            int x2=width-1;
            for(int y=0;y<height;y++){
                for(int x=0;x<width && x2>=0;x++){
                    int p=image.getRGB(x, y);
                    temp.setRGB(x2,y,p);
                    x2--;
                }
                x2=width-1;
            }
            image=temp;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_MirrorIconActionPerformed

    private void DownwardIConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownwardIConActionPerformed
        choice = 82;
        if(apply == true)
        {
            int width= image.getWidth();
            int height= image.getHeight();
            BufferedImage newImage=new BufferedImage(image.getWidth(),image.getHeight(),image.getType());
            Graphics2D g2=newImage.createGraphics();   //creating graphics in buffered image

            g2.rotate(Math.toRadians(180),width/2,height/2);
            g2.drawImage(image,null,0,0);
            image = newImage;
            apply = false;
            DisplayOutputImage();
        }
    }//GEN-LAST:event_DownwardIConActionPerformed
// kpb.amcs@psgtech.ac.in
    private void ApplyFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyFilterActionPerformed
        apply=true;
        if(choice == 11){
            GrayScaleActionPerformed(evt);
        }
        if(choice == 12){
            GrayScaleIconActionPerformed(evt);
        }
        if(choice == 21){
            NegativeActionPerformed(evt);
        }
        if(choice == 22){
            NegativeIconActionPerformed(evt);
        }
        if(choice == 31){
            SepiaActionPerformed(evt);
        }
        if(choice == 32){
            SepiaIconActionPerformed(evt);
        }
        if(choice == 41){
            BlurActionPerformed(evt);
        }
        if(choice == 42){
            BlurIconActionPerformed(evt);
        }
        if(choice == 51){
            RightActionPerformed(evt);
        }
        if(choice == 52){
            RightRotateIconActionPerformed(evt);
        }
        if(choice == 61){
            LeftActionPerformed(evt);
        }
        if(choice == 62){
            LeftRotateIconActionPerformed(evt);
        }
        if(choice == 71){
            MirrorActionPerformed(evt);
        }
        if(choice == 72){
            MirrorIconActionPerformed(evt);
        }
        if(choice == 81){
            DownActionPerformed(evt);
        }
        if(choice == 82){
            DownwardIConActionPerformed(evt);
        }
        if(choice == 91){
            BrightActionPerformed(evt);
        }
        if(choice ==92){
            BrightnessIconActionPerformed(evt);
        }
        if(choice ==10){
            RGBActionPerformed(evt);
        }
    }//GEN-LAST:event_ApplyFilterActionPerformed

    private void BrightnessIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrightnessIconActionPerformed
        choice =92;
        BrightSlider.setEnabled(true);
        BrightValue.setEnabled(true);
        BrightValue.setText(""+BrightSlider.getValue());
        if(apply==true){
                                                                    //BrightSlider.setEnabled(true);
            int rgb[];
                                                                    // Setting custom brightness
            int brightnessValue = BrightSlider.getValue();
            BrightValue.setText(""+BrightSlider.getValue());
                                                                    // Outer loop for width of image
            for (int i = 0; i < image.getWidth(); i++) {
                                                                    // Inner loop for height of image
                for (int j = 0; j < image.getHeight(); j++) {
                    rgb = image.getRaster().getPixel(
                        i, j, new int[3]);
                                                                    // Using(calling) method 1
                    int red = Truncate(rgb[0] + brightnessValue);
                    int green = Truncate(rgb[1] + brightnessValue);
                    int blue= Truncate(rgb[2] + brightnessValue);
                    int arr[] = { red, green, blue };
                                                                    // Using setPixel() method
                    image.getRaster().setPixel(i, j, arr);
                }
            }
            apply = false;
            BrightSlider.setEnabled(false);
            BrightValue.setEnabled(false);
            DisplayOutputImage();
        }
    }//GEN-LAST:event_BrightnessIconActionPerformed

    private void BrightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrightActionPerformed
        choice =91;
        BrightSlider.setEnabled(true);
        BrightValue.setEnabled(true);
        BrightValue.setText(""+BrightSlider.getValue());
        if(apply==true){
            int rgb[];
                                                                    //BrightSlider.setEnabled(true);
                                                                    // Setting custom brightness
            int brightnessValue = BrightSlider.getValue();
            BrightValue.setText(""+BrightSlider.getValue());
                                                                    // Outer loop for width of image
            for (int i = 0; i < image.getWidth(); i++) {
                                                                    // Inner loop for height of image
                for (int j = 0; j < image.getHeight(); j++) {
                    rgb = image.getRaster().getPixel(i, j, new int[3]);
                                                                    // Using(calling) method 1
                    int red= Truncate(rgb[0] + brightnessValue);
                    int green= Truncate(rgb[1] + brightnessValue);
                    int blue=Truncate(rgb[2] + brightnessValue);
                    int arr[] = { red, green, blue };
                                                                    // Using setPixel() method
                    image.getRaster().setPixel(i, j, arr);
                }
            }
            apply = false;
            BrightSlider.setEnabled(false);
            BrightValue.setEnabled(false);
            DisplayOutputImage();
        }
    }//GEN-LAST:event_BrightActionPerformed

    private void BrightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BrightSliderStateChanged
        BrightValue.setText(""+BrightSlider.getValue());
    }//GEN-LAST:event_BrightSliderStateChanged

    private void BrightValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrightValueActionPerformed
        
    }//GEN-LAST:event_BrightValueActionPerformed

    private void RedvalueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedvalueActionPerformed
        
    }//GEN-LAST:event_RedvalueActionPerformed

    private void RedSlidersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RedSlidersStateChanged
        UpdateValues();
    }//GEN-LAST:event_RedSlidersStateChanged

    private void GreenSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GreenSliderStateChanged
        UpdateValues();
    }//GEN-LAST:event_GreenSliderStateChanged

    private void BlueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BlueSliderStateChanged
        UpdateValues();
    }//GEN-LAST:event_BlueSliderStateChanged

    private void RGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGBActionPerformed
        choice = 10;
        RedSliders.setEnabled(true);
        GreenSlider.setEnabled(true);
        BlueSlider.setEnabled(true);
        Redvalue.setEnabled(true);
        Greenvalue.setEnabled(true);
        Bluevalue.setEnabled(true);
        if(apply==true){
            makeFilterImage();
            apply=false;
            RedSliders.setEnabled(false);
            GreenSlider.setEnabled(false);
            BlueSlider.setEnabled(false);
            Redvalue.setEnabled(false);
            Greenvalue.setEnabled(false);
            Bluevalue.setEnabled(false);
        }
    }//GEN-LAST:event_RGBActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        new About().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    public void UpdateValues(){
       Redvalue.setText(RedSliders.getValue()+"");
       Bluevalue.setText(BlueSlider.getValue()+"");
       Greenvalue.setText(GreenSlider.getValue()+"");
    }
    private void makeFilterImage(){
        int alpha,red,green,blue,width,height=0;
        width = image.getWidth();
        height = image.getHeight();
        pixels = new int[width][height];
        for(int i=0;i<width;i++){
            for(int j=0;j<height;j++){
                pixels[i][j]=image.getRGB(i, j);
            }
        }
        BufferedImage newBI = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB) ;
        boolean hasAlpha = (image.getAlphaRaster()!=null);//has an alpha channel
        for(int i=0;i<width;i++){
            for(int j=0;j<height;j++){
                alpha=255;
                //alpha
               if(hasAlpha){
                   alpha=(pixels[i][j] & 0xff000000 )>>24;
               }
               //red
               red =(pixels[i][j] & 0x00ff0000)>>16;
               //green
               green=(pixels[i][j] & 0x0000ff00)>>8;
               //blue
               blue =(pixels[i][j] & 0x0000ff);
               
               red+= RedSliders.getValue();
               if(red > 255){red=255;}
               if(red<0){red=0;}
               
               green+=GreenSlider.getValue();
               if(green >255){green = 255;}
               if(green<0){green=0;}
               
               blue+=BlueSlider.getValue();
               if(blue > 255){blue = 255;}
               if(blue<0){blue =0;}
               
               alpha = alpha<<24;
               red =red<<16;
               green = green<<8;
              
               newBI.setRGB(i,j,(alpha|red|green|blue));
            }
        }
        image=newBI;
        DisplayOutputImage();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IET.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
           IET fame = new IET();
           fame.show();
           
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IET().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyFilter;
    private javax.swing.JSlider BlueSlider;
    private javax.swing.JTextField Bluevalue;
    private javax.swing.JMenuItem Blur;
    private javax.swing.JButton BlurIcon;
    private javax.swing.JMenuItem Bright;
    private javax.swing.JSlider BrightSlider;
    private javax.swing.JTextField BrightValue;
    private javax.swing.JButton BrightnessIcon;
    private javax.swing.JMenuItem Close;
    private javax.swing.JMenuItem Down;
    private javax.swing.JButton DownwardICon;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Filter;
    private javax.swing.JMenuItem GrayScale;
    private javax.swing.JButton GrayScaleIcon;
    private javax.swing.JSlider GreenSlider;
    private javax.swing.JTextField Greenvalue;
    private javax.swing.JMenuItem Left;
    private javax.swing.JButton LeftRotateIcon;
    private javax.swing.JMenuItem Mirror;
    private javax.swing.JButton MirrorIcon;
    private javax.swing.JMenuItem Negative;
    private javax.swing.JButton NegativeIcon;
    private javax.swing.JMenuItem Open;
    private javax.swing.JButton OpenIcon;
    private javax.swing.JButton RGB;
    private javax.swing.JSlider RedSliders;
    private javax.swing.JTextField Redvalue;
    private javax.swing.JMenuItem Right;
    private javax.swing.JButton RightRotateIcon;
    private javax.swing.JMenu Rotate;
    private javax.swing.JButton SaveIcon;
    private javax.swing.JMenuItem Sepia;
    private javax.swing.JButton SepiaIcon;
    private javax.swing.JToolBar ToolBar1;
    private javax.swing.JToolBar ToolBar2;
    private javax.swing.JMenu Transform;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label2;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
}
